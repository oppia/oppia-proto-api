syntax = "proto3";

package org.oppia.proto.v1.structure;

import "org/oppia/proto/v1/structure/languages.proto";
import "org/oppia/proto/v1/structure/objects.proto";
import "org/oppia/proto/v1/versions/structure_versions.proto";

option java_package = "org.oppia.proto.v1.structure";
option java_multiple_files = true;

// Represents a 'State' within a learning session (such as a practice quiz or exploration). A
// 'State' corresponds to a visual card shown to the learner with initial content (often a
// question) along with an 'interaction' (a type of answer that the user can input, such as
// fractions or text). When users submit answers to this interaction, they receive feedback in the
// form of a textual response and may be routed to the same state, or to a new state (which may be a
// repeat of one they've completed in the past).
message StateDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The version defining the internal structure of this message.
  org.oppia.proto.v1.versions.StateProtoVersion proto_version = 1;

  // The main content of the state which is the first thing shown to a learner viewing this state.
  SubtitledTextDto content = 2;

  // The interaction of the state (which must be interacted with by the learner in order to
  // proceed).
  InteractionInstanceDto interaction = 3;
}

// Represents an instance of a single interaction within a state. Note that interactions are
// specialized so that the client can perform very specific analysis on the user's answer as to
// provide more useful or targeted feedback (and to help detect specific misconceptions that the
// learner may be having). Specific interactions may also provide interaction-specific error
// messages (such as malformed fractions).
//
// Note that interactions work by matching user answers to rules that are organized into 'answer
// groups'. If an answer group is matched, the textual feedback corresponding to that group is shown
// to the user and the route defined by that group is taken (i.e. the defined state is the next
// state shown to the user). This route & the feedback are organized into a concept called an
// 'outcome'. Many interactions have 'default' outcomes that are selected if no answers match (or in
// cases when the user doesn't have choice on providing dynamic answers).
//
// For specifics, answer groups are selected by matching an answer to one or more 'rules' in the
// answer group (defined via a 'RuleSpec'). Rules represent inputs to predefined classifiers that
// can be used to match an answer.
//
// Interactions may also show hints to the learner if they get stuck and, after a certain number of
// hints, may offer to show the solution to the interaction. Not all interactions support hints and
// solutions.
//
// Specific interaction messages below more explicitly define what they support, and the types of
// answers that they expect.
//
// Finally, interactions may have 'customization arguments' which are creator-provided options to
// specialize the interaction for that particular context (such as tweaking hint or placeholder text
// for input boxes).
message InteractionInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The type of the interaction.
  oneof interaction_type {
    // An interaction that takes the form of a simple 'Continue' button.
    ContinueInstanceDto continue_instance = 1;

    // An interaction for inputting fractions.
    FractionInputInstanceDto fraction_input = 2;

    // An interaction for selecting one or more items from a list.
    ItemSelectionInputInstanceDto item_selection_input = 3;

    // An interaction for selecting a single option among multiple presented choices.
    MultipleChoiceInputInstanceDto multiple_choice_input = 4;

    // An interaction for inputting numbers.
    NumericInputInstanceDto numeric_input = 5;

    // An interaction for inputting a line of text.
    TextInputInstanceDto text_input = 6;

    // An interaction for rearranging a list of items by dragging & dropping them.
    DragAndDropSortInputInstanceDto drag_and_drop_sort_input = 7;

    // An interaction for selecting a learner-identified part of an image.
    ImageClickInputInstanceDto image_click_input = 8;

    // An interaction for inputting ratios.
    RatioExpressionInputInstanceDto ratio_expression_input = 9;

    // An interaction for inputting algebric expressions.
    AlgebraicExpressionInputInstanceDto algebraic_expression_input = 10;

    // An interaction for inputting math equations.
    MathEquationInputInstanceDto math_equation_input = 11;

    // An interaction for inputting numeric equations.
    NumericExpressionInputInstanceDto numeric_expression_input = 12;

    // An interaction that represents the end of an exploration and takes no direct user input other
    // than navigating away from the exploration. This is not used in question play sessions.
    EndExplorationInstanceDto end_exploration = 13;
  }
}

// Represents an interaction where the user is presented with a simple 'Continue' button. Details:
// - Answer type: none (N/A since no answers are submitted for this interaction)
// - Has a default outcome: yes (it's actually the only outcome)
// - Has support for showing hints: no
// - Has support for showing a solution: no
message ContinueInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 2;

  // Continue interactions cannot have custom answer groups, and do not support solutions. Users
  // cannot receive hints since only one answer is possible (clicking the button).

  // Represents the customization arguments available for instances of the continue interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Custom text to use for the 'Continue' button displayed for this interaction rather than using
    // the button's default text ('Continue').
    SubtitledTextDto button_text = 1;
  }
}

// Represents an interaction where the user is expected to input a textual fraction. Details:
// - Answer type: Fraction
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: yes
message FractionInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 2;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 3;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 4;

  // The solution corresponding to this interaction.
  SolutionDto solution = 5;

  // Represents the customization arguments available for instances of the fraction input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Specifics whether fractions must be provided in simplest form (that is, '2/4' would not be
    // allowed, but '1/2' would be).
    bool requires_simplest_form = 1;

    // Specifics whether to allow improper fractions (i.e. whether fractions like '5/4' would be
    // allowed).
    bool allow_improper_fractions = 2;

    // Specifics whether the fraction input can contain an integer part, that is, whether it can be
    // a mixed fraction like '1 2/3'.
    bool allow_nonzero_integer_part = 3;

    // Specifies the placeholder/hint text that should be shown in the fraction input box prior to
    // the user starting to enter an answer. Note that this will override the client's default text.
    SubtitledTextDto placeholder = 4;
  }

  // Represents the specific solution available to instances of the fraction input interaction.
  message SolutionDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the solution.
    BaseSolutionDto base_solution = 1;

    // The correct answer for this interaction that should be shown to the user.
    FractionDto correct_answer = 2;
  }

  // Represents the specific answer group used by instances of the fraction input interaction.
  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  // Represents specific rule specs used by instances of the fraction input interaction.
  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Possible rule types for fraction answers.
    oneof rule_type {
      // See the specific message's documentation for details on this rule type.
      IsExactlyEqualToSpecDto is_exactly_equal_to = 1;

      // See the specific message's documentation for details on this rule type.
      IsEquivalentToSpecDto is_equivalent_to = 2;

      // See the specific message's documentation for details on this rule type.
      IsEquivalentToAndInSimplestFormSpecDto is_equivalent_to_and_in_simplest_form = 3;

      // See the specific message's documentation for details on this rule type.
      IsLessThanSpecDto is_less_than = 4;

      // See the specific message's documentation for details on this rule type.
      IsGreaterThanSpecDto is_greater_than = 5;

      // See the specific message's documentation for details on this rule type.
      HasNumeratorEqualToSpecDto has_numerator_equal_to = 6;

      // See the specific message's documentation for details on this rule type.
      HasDenominatorEqualToSpecDto has_denominator_equal_to = 7;

      // See the specific message's documentation for details on this rule type.
      HasIntegerPartEqualToSpecDto has_integer_part_equal_to = 8;

      // See the specific message's documentation for details on this rule type.
      HasNoFractionalPartSpecDto has_no_fractional_part = 9;

      // See the specific message's documentation for details on this rule type.
      HasFractionalPartExactlyEqualToSpecDto has_fractional_part_exactly_equal_to = 10;
    }

    // Represents a rule spec for checking whether an answer exactly matches a creator-specified
    // fraction.
    message IsExactlyEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified fraction to match against the user's answer.
      FractionDto input = 1;
    }

    // Represents a rule spec for checking whether an answer is equivalent to a creator-specified
    // fraction (but not necessarily exactly the same).
    message IsEquivalentToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified fraction to match against the user's answer.
      FractionDto input = 1;
    }

    // Represents a rule spec for checking whether an answer is equivalent to a creator-specified
    // fraction, in a similar way to IsEquivalentToSpec, except this also requires that the user's
    // answer is in simplest form.
    message IsEquivalentToAndInSimplestFormSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified fraction to match against the user's answer.
      FractionDto input = 1;
    }

    // Represents a rule spec for checking whether an answer is mathematically less than a
    // creator-specified fraction.
    message IsLessThanSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified fraction to match against the user's answer.
      FractionDto input = 1;
    }

    // Represents a rule spec for checking whether an answer is mathematically greater than a
    // creator-specified fraction.
    message IsGreaterThanSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified fraction to match against the user's answer.
      FractionDto input = 1;
    }

    // Represents a rule spec for checking whether an answer has a numerator equal to a
    // creator-specified numerator.
    message HasNumeratorEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified numerator to match against the user's answer.
      int32 input = 1;
    }

    // Represents a rule spec for checking whether an answer has a denominator equal to a
    // creator-specified denominator.
    message HasDenominatorEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified denominator to match against the user's answer.
      uint32 input = 1;
    }

    // Represents a rule spec for checking whether an answer has an integer part equal to a
    // creator-specified integer part.
    message HasIntegerPartEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified integer part to match against the user's answer.
      int32 input = 1;
    }

    // Represents a rule spec for checking whether an answer is missing its fractional part (i.e.
    // that it's just a whole number).
    message HasNoFractionalPartSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // No inputs for this rule spec.
    }

    // Represents a rule spec for checking whether an answer has a fractional part exactly equal to
    // a creator-specified fraction (whose integer part is ignored during classification).
    message HasFractionalPartExactlyEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified fraction to match against the user's answer.
      FractionDto input = 1;
    }
  }
}

// Represents an interaction where the user can select one or more options from a list of choices.
// Details:
// - Answer type: SetOfTranslatableHtmlContentIds
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: no
message ItemSelectionInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 2;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 3;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 4;

  // Item selection does not support solutions.

  // Represents the customization arguments available for instances of the item selection input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Specifies the minimum number of items that must be selected before an answer can be
    // submitted.
    uint32 min_allowable_selection_count = 1;

    // Specifies the maximum number of items that may be selected. If this '1' then the options will
    // be displayed as radio buttons instead of checkboxes.
    uint32 max_allowable_selection_count = 2;

    // The list of selectable items.
    repeated SubtitledTextDto choices = 3;
  }

  // Represents the specific answer group used by instances of the item selection input interaction.
  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  // Represents specific rule specs used by instances of the item selection input interaction.
  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Possible rule types for item selection answers.
    oneof rule_type {
      // See the specific message's documentation for details on this rule type.
      EqualsSpecDto equals = 1;

      // See the specific message's documentation for details on this rule type.
      ContainsAtLeastOneOfSpecDto contains_at_least_one_of = 2;

      // See the specific message's documentation for details on this rule type.
      DoesNotContainAtLeastOneOfSpecDto does_not_contain_at_least_one_of = 3;

      // See the specific message's documentation for details on this rule type.
      IsProperSubsetOfSpecDto is_proper_subset_of = 4;
    }

    // Represents a rule spec for checking whether an answer has exactly the same items as a
    // creator-specified list of item selections. Note that order does not matter for these items.
    message EqualsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified list of item selections to match against the user's
      // answer.
      SetOfTranslatableHtmlContentIdsDto input = 1;
    }

    // Represents a rule spec for checking whether an answer has at least one of the items defined
    // in a creator-specified list of item selections. Note that order does not matter for these
    // items.
    message ContainsAtLeastOneOfSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified list of item selections to match against the user's
      // answer.
      SetOfTranslatableHtmlContentIdsDto input = 1;
    }

    // Represents a rule spec for checking whether an answer has none of the items defined in a
    // creator-specified list of item selections. Note that order does not matter for these items.
    message DoesNotContainAtLeastOneOfSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified list of item selections to match against the user's
      // answer.
      SetOfTranslatableHtmlContentIdsDto input = 1;
    }

    // Represents a rule spec for checking whether an answer is a proper subset of a
    // creator-specified list of item selections (treated as a set), that is, that it's fully
    // contained in the creator-specified set but is not exactly equal to it.
    message IsProperSubsetOfSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified list of item selections to match against the user's
      // answer.
      SetOfTranslatableHtmlContentIdsDto input = 1;
    }
  }
}

// Represents an interaction where the user can select one choice among a list of choices. Details:
// - Answer type: non-negative int (protobuf type: uint32)
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: no
message MultipleChoiceInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 2;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 3;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 4;

  // Multiple choice does not support solutions.

  // Represents the customization arguments available for instances of the multiple choice input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The list of selectable items.
    repeated SubtitledTextDto choices = 1;
  }

  // Represents the specific answer group used by instances of the multiple choice input
  // interaction.
  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  // Represents specific rule specs used by instances of the multiple choice input interaction.
  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Possible rule types for multiple choice answers.
    oneof rule_type {
      // See the specific message's documentation for details on this rule type.
      EqualsSpecDto equals = 1;
    }

    // Represents a rule spec for checking whether an answer matches to a creator-specified multiple
    // choice option index.
    message EqualsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified multiple choice option index to match against the
      // user's answer.
      uint32 input = 1;
    }
  }
}

// Represents an interaction where the user can input an numeric-only answer. Details:
// - Answer type: real number (protobuf type: uint32)
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: yes
message NumericInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 1;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 2;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 3;

  // The solution corresponding to this interaction.
  SolutionDto solution = 4;

  // Numeric input does not have any customization arguments.

  // Represents the specific solution available to instances of the numeric input interaction.
  message SolutionDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the solution.
    BaseSolutionDto base_solution = 1;

    // The correct answer for this interaction that should be shown to the user.
    double correct_answer = 2;
  }

  // Represents the specific answer group used by instances of the numeric input interaction.
  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  // Represents specific rule specs used by instances of the numeric input interaction.
  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Possible rule types for numeric input answers.
    oneof rule_type {
      // See the specific message's documentation for details on this rule type.
      EqualsSpecDto equals = 1;

      // See the specific message's documentation for details on this rule type.
      IsLessThanSpecDto is_less_than = 2;

      // See the specific message's documentation for details on this rule type.
      IsGreaterThanSpecDto is_greater_than = 3;

      // See the specific message's documentation for details on this rule type.
      IsLessThanOrEqualToSpecDto is_less_than_or_equal_to = 4;

      // See the specific message's documentation for details on this rule type.
      IsGreaterThanOrEqualToSpecDto is_greater_than_or_equal_to = 5;

      // See the specific message's documentation for details on this rule type.
      IsInclusivelyBetweenSpecDto is_inclusively_between = 6;

      // See the specific message's documentation for details on this rule type.
      IsWithinToleranceSpecDto is_within_tolerance = 7;
    }

    // Represents a rule spec for checking whether an answer exactly* equals a creator-specified real
    // value. *Note that the match here uses an epsilon comparison to account for IEEE 754 floating
    // point rounding errors.
    message EqualsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified real value to match against the user's answer.
      double input = 1;
    }

    // Represents a rule spec for checking whether an answer is numerically less than a
    // creator-specified real value.
    message IsLessThanSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified real value to match against the user's answer.
      double input = 1;
    }

    // Represents a rule spec for checking whether an answer is numerically greater than a
    // creator-specified real value.
    message IsGreaterThanSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified real value to match against the user's answer.
      double input = 1;
    }

    // Represents a rule spec for checking whether an answer is numerically less than or exactly
    // equal to a creator-specified real value.
    message IsLessThanOrEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified real value to match against the user's answer.
      double input = 1;
    }

    // Represents a rule spec for checking whether an answer is numerically greater than or exactly
    // equal to a creator-specified real value.
    message IsGreaterThanOrEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified real value to match against the user's answer.
      double input = 1;
    }

    // Represents a rule spec for checking whether an answer is within a creator-specified fully
    // closed/inclusive range.
    message IsInclusivelyBetweenSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified inclusive lower bound for comparison against the
      // user's answer.
      double input_lower_inclusive = 1;

      // Corresponds to the creator-specified inclusive upper bound for comparison against the
      // user's answer.
      double input_upper_inclusive = 2;
    }

    // Represents a rule spec for checking whether an answer is equal to a creator-specified value
    // when accounting for a creator-specific tolerance range.
    message IsWithinToleranceSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified tolerance to consider when matching against the user's
      // answer.
      double input_tolerance = 1;

      // Corresponds to the creator-specified value to compare against the user's answer.
      double input_compared_value = 2;
    }
  }
}

// Represents an interaction where the user can input a line of text. Details:
// - Answer type: normalized string (protobuf type: string)
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: yes
//
// Note that all answers submitted to this interaction undergo 'string normalization' which involves
// trimming leading & trailing whitespace, removing all non-space whitespace, and replacing extra
// spaces such that at most one space separates characters.
message TextInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 2;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 3;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 4;

  // The solution corresponding to this interaction.
  SolutionDto solution = 5;

  // Represents the customization arguments available for instances of the text input interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Specifies the placeholder/hint text that should be shown in the text input box prior to the
    // user starting to enter an answer. Note that this will override the client's default text.
    SubtitledTextDto placeholder = 1;

    // Specifies the number of rows (visual lines) that should be allowed for text input.
    uint32 rows = 2;
  }

  // Represents the specific solution available to instances of the text input interaction.
  message SolutionDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the solution.
    BaseSolutionDto base_solution = 1;

    // The correct answer for this interaction that should be shown to the user.
    string correct_answer = 2;
  }

  // Represents the specific answer group used by instances of the text input interaction.
  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  // Represents specific rule specs used by instances of the text input interaction.
  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Possible rule types for text input answers.
    oneof rule_type {
      // See the specific message's documentation for details on this rule type.
      EqualsSpecDto equals = 1;

      // See the specific message's documentation for details on this rule type.
      StartsWithSpecDto starts_with = 2;

      // See the specific message's documentation for details on this rule type.
      ContainsSpecDto contains = 3;

      // See the specific message's documentation for details on this rule type.
      FuzzyEqualsSpecDto fuzzy_equals = 4;
    }

    // Represents a rule spec for checking whether an answer is exactly equal to (after string
    // normalization) to any of the strings in a creator-specified string list.
    message EqualsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified set of text input values to match against the user's
      // answer.
      TranslatableSetOfNormalizedStringDto input = 1;
    }

    // Represents a rule spec for checking whether an answer starts with any of the strings in a
    // creator-specified string list (with string normalization).
    message StartsWithSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified set of text input values to match against the user's
      // answer.
      TranslatableSetOfNormalizedStringDto input = 1;
    }

    // Represents a rule spec for checking whether an answer contains any of the strings in a
    // creator-specified string list (with string normalization).
    message ContainsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified set of text input values to match against the user's
      // answer.
      TranslatableSetOfNormalizedStringDto input = 1;
    }

    // Represents a rule spec for checking whether an answer fuzzily equals any of the strings in a
    // creator-specified string list (with string normalization), that is, whether it equals one of
    // the strings with at most one character misspelled.
    message FuzzyEqualsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified set of text input values to match against the user's
      // answer.
      TranslatableSetOfNormalizedStringDto input = 1;
    }
  }
}

// Represents an interaction where the user can rearrange a list of options using drag & drop
// functionality. Details:
// - Answer type: ListOfSetsOfTranslatableHtmlContentIds
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: yes
message DragAndDropSortInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 2;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 3;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 4;

  // The solution corresponding to this interaction.
  SolutionDto solution = 5;

  // Represents the customization arguments available for instances of the drag and drop sort input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The list of items that can be dragged & dropped.
    repeated SubtitledTextDto choices = 1;

    // Specifies whether items can be allowed at the same position in the list (i.e. linked or
    // unlinked).
    bool allow_multiple_items_in_same_position = 2;
  }

  // Represents the specific solution available to instances of the drag and drop sort input
  // interaction.
  message SolutionDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the solution.
    BaseSolutionDto base_solution = 1;

    // The correct answer for this interaction that should be shown to the user.
    ListOfSetsOfTranslatableHtmlContentIdsDto correct_answer = 2;
  }

  // Represents the specific answer group used by instances of the drag and drop sort input
  // interaction.
  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  // Represents specific rule specs used by instances of the drag and drop sort input interaction.
  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Possible rule types for drag and drop answers.
    oneof rule_type {
      // See the specific message's documentation for details on this rule type.
      IsEqualToOrderingSpecDto is_equal_to_ordering = 1;

      // See the specific message's documentation for details on this rule type.
      IsEqualToOrderingWithOneItemAtIncorrectPositionSpecDto is_equal_to_ordering_with_one_item_at_incorrect_position = 2;

      // See the specific message's documentation for details on this rule type.
      HasElementXAtPositionYSpecDto has_element_x_at_position_y = 3;

      // See the specific message's documentation for details on this rule type.
      HasElementXBeforeElementYSpecDto has_element_x_before_element_y = 4;
    }

    // Represents a rule spec for checking whether an answer exactly matches a creator-specified
    // drag and drop configuration (that is, a list of drag and drop items with some items
    // potentially on the same line), with ordering being considered.
    message IsEqualToOrderingSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified drag and drop configuration to match against the
      // user's answer.
      ListOfSetsOfTranslatableHtmlContentIdsDto input = 1;
    }

    // Represents a rule spec for checking whether an answer exactly matches a creator-specified
    // drag and drop configuration (that is, a list of drag and drop items with some items
    // potentially on the same line), with ordering being considered and with exactly one item being
    // in the incorrect position.
    message IsEqualToOrderingWithOneItemAtIncorrectPositionSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified drag and drop configuration to match against the
      // user's answer.
      ListOfSetsOfTranslatableHtmlContentIdsDto input = 1;
    }

    // Represents a rule spec for checking whether an answer has an element at a creator-specified
    // position exactly matched a creator-specified option (which should correspond to one of the
    // options defined in the interaction's customization arguments).
    message HasElementXAtPositionYSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified single element to match against the user's answer.
      TranslatableHtmlContentIdDto element = 1;

      // Corresponds to the creator-specified element index with which to extract from the user's
      // answer a value to compare against the defined element.
      uint32 position = 2;
    }

    // Represents a rule spec for checking whether an answer has two creator-specified elements such
    // that one of the particular elements occurs before another one of the specified elements,
    // where both elements should correspond to options defined in the interaction's customization
    // arguments).
    message HasElementXBeforeElementYSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified element that's expected to be contained in the user's
      // answer.
      TranslatableHtmlContentIdDto considered_element = 1;

      // Corresponds to the creator-specified element that's expected to be contained in the user's
      // answer.
      TranslatableHtmlContentIdDto later_element = 2;
    }
  }
}

// Represents an interaction where the user can select a region of an image. Details:
// - Answer type: ClickOnImage
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: no
message ImageClickInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 2;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 3;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 4;

  // Image click input doesn't yet support solutions.

  // Represents the customization arguments available for instances of the image click input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Defines the image to display to the user, and all of the constituent regions that the user
    // may selected.
    ImageWithRegionsDto image_and_regions = 1;
  }

  // Represents the specific answer group used by instances of the image click input interaction.
  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  // Represents specific rule specs used by instances of the image click input interaction.
  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Possible rule types for image click answers.
    oneof rule_type {
      // See the specific message's documentation for details on this rule type.
      IsInRegionSpecDto is_in_region = 1;
    }

    // Represents a rule spec for checking whether an answer corresponds to a creator-specified
    // region (as a determination of that region being clicked by the user).
    message IsInRegionSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified image region label to match against the user's answer.
      string input_region = 1;
    }
  }
}

// Represents an interaction where the user can input the ratio between two integers. Details:
// - Answer type: RatioExpression
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: yes
message RatioExpressionInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 2;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 3;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 4;

  // The solution corresponding to this interaction.
  SolutionDto solution = 5;

  // Represents the customization arguments available for instances of the ratio expression input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Specifies the placeholder/hint text that should be shown in the ratio input box prior to the
    // user starting to enter an answer. Note that this will override the client's default text.
    SubtitledTextDto placeholder = 1;

    // The number of elements that the answer must have, or 0 to indicate that a ratio of any length
    // will be accepted. For example, if this is set to '5' then the ratio must have 5 components
    // (such as 1:2:3:4:5).
    uint32 number_of_terms = 2;
  }

  // Represents the specific solution available to instances of the ratio expression input
  // interaction.
  message SolutionDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the solution.
    BaseSolutionDto base_solution = 1;

    // The correct answer for this interaction that should be shown to the user.
    RatioExpressionDto correct_answer = 2;
  }

  // Represents the specific answer group used by instances of the ratio expression input
  // interaction.
  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  // Represents specific rule specs used by instances of the ratio expression input interaction.
  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // Possible rule types for ratio expression answers.
    oneof rule_type {
      // See the specific message's documentation for details on this rule type.
      EqualsSpecDto equals = 1;

      // See the specific message's documentation for details on this rule type.
      IsEquivalentSpecDto is_equivalent = 2;

      // See the specific message's documentation for details on this rule type.
      HasNumberOfTermsEqualToSpecDto has_number_of_terms_equal_to = 3;

      // See the specific message's documentation for details on this rule type.
      HasSpecificTermEqualToSpecDto has_specific_term_equal_to = 4;
    }

    // Represents a rule spec for checking whether an answer exactly equals a creator-specified
    // ratio expression.
    message EqualsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified ratio expression to match against the user's answer.
      RatioExpressionDto input = 1;
    }

    // Represents a rule spec for checking whether an answer is equivalent to a creator-specified
    // ratio expression (e.g. '1:2' amd '2:4' would be considered equivalent, but not equal).
    message IsEquivalentSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified ratio expression to match against the user's answer.
      RatioExpressionDto input = 1;
    }

    // Represents a rule spec for checking whether an answer has a creator-specified number of
    // terms.
    message HasNumberOfTermsEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified number of terms to match against the user's answer.
      uint32 input_term_count = 1;
    }

    // Represents a rule spec for checking whether an answer has a creator-specified term value at a
    // creator-specified term position within the answer.
    message HasSpecificTermEqualToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      // Corresponds to the creator-specified term index to match against the user's answer.
      uint32 input_term_index = 1;

      // Corresponds to the creator-specified expected term value to match against the user's
      // answer.
      uint32 input_expected_term_value = 2;
    }
  }
}

// Represents an interaction where the user can input the algebric expressions. Details:
// - Answer type: normalized string (protobuf type: string)
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: yes
message AlgebraicExpressionInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 2;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 3;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 4;

  // The solution corresponding to this interaction.
  SolutionDto solution = 5;

  // Represents the customization arguments available for instances of the algebric expression input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    repeated string custom_osk_letters = 1;

    bool use_fraction_for_division = 2;
  }

  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    oneof rule_type {
      MatchesExactlyWithSpecDto matches_exactly_with = 1;

      MatchesUpToTrivialManipulationsSpecDto matches_up_to_trivial_manipulations = 2;
  
      IsEquivalentToSpecDto is_equivalent_to = 3;
    }

    message MatchesExactlyWithSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string algebraic_expression = 1;
    }

    message MatchesUpToTrivialManipulationsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string algebraic_expression = 1;
    }

    message IsEquivalentToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string algebraic_expression = 1;
    }
  }

  // Represents the specific solution available to instances of the algebric expression input
  // interaction.
  message SolutionDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the solution.
    BaseSolutionDto base_solution = 1;

    // The correct answer for this interaction that should be shown to the user.
    string correct_answer = 2;
  }
}

// Represents an interaction where the user can input the math equaltions. Details:
// - Answer type: normalized string (protobuf type: string)
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: yes
message MathEquationInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 2;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 3;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 4;

  // The solution corresponding to this interaction.
  SolutionDto solution = 5;

  // Represents the customization arguments available for instances of the math equation input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    repeated string custom_osk_letters = 1;

    bool use_fraction_for_division = 2;
  }

  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    oneof rule_type {
      MatchesExactlyWithSpecDto matches_exactly_with = 1;

      MatchesUpToTrivialManipulationsSpecDto matches_up_to_trivial_manipulations = 2;
  
      IsEquivalentToSpecDto is_equivalent_to = 3;
    }

    message MatchesExactlyWithSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string math_equation = 1;
    }

    message MatchesUpToTrivialManipulationsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string math_equation = 1;
    }

    message IsEquivalentToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string math_equation = 1;
    }
  }

  // Represents the specific solution available to instances of the math equation input
  // interaction.
  message SolutionDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the solution.
    BaseSolutionDto base_solution = 1;

    // The correct answer for this interaction that should be shown to the user.
    string correct_answer = 2;
  }
}

// Represents an interaction where the user can input the numeric expressions. Details:
// - Answer type: normalized string (protobuf type: string)
// - Has a default outcome: yes
// - Has support for showing hints: yes
// - Has support for showing a solution: yes
message NumericExpressionInputInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The customization arguments for this interaction.
  CustomizationArgsDto customization_args = 1;

  // The default outcome for this interaction.
  OutcomeDto default_outcome = 2;

  // The hints corresponding to this interaction.
  repeated HintDto hints = 3;

  // The answer groups for this interaction.
  repeated AnswerGroupDto answer_groups = 4;

  // The solution corresponding to this interaction.
  SolutionDto solution = 5;

  // Represents the customization arguments available for instances of the numeric expression input
  // interaction.
  message CustomizationArgsDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    SubtitledTextDto placeholder = 1;

    bool use_fraction_for_division = 2;
  }

  message AnswerGroupDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the answer group.
    BaseAnswerGroupDto base_answer_group = 1;

    // The list of all rules to match for this answer group.
    repeated RuleSpecDto rule_specs = 2;
  }

  message RuleSpecDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    oneof rule_type {
      MatchesExactlyWithSpecDto matches_exactly_with = 1;

      MatchesUpToTrivialManipulationsSpecDto matches_up_to_trivial_manipulations = 2;
  
      IsEquivalentToSpecDto is_equivalent_to = 3;
    }

    message MatchesExactlyWithSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string numeric_expression = 1;
    }

    message MatchesUpToTrivialManipulationsSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string numeric_expression = 1;
    }

    message IsEquivalentToSpecDto {
      option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

      string numeric_expression = 1;
    }
  }

  // Represents the specific solution available to instances of the numeric expression input
  // interaction.
  message SolutionDto {
    option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

    // The base properties of the solution.
    BaseSolutionDto base_solution = 1;

    // The correct answer for this interaction that should be shown to the user.
    string correct_answer = 2;
  }
}

// Represents an interaction where the user has reached the end of the exploration, and has the
// choice to navigate away from it. Details:
// - Answer type: none (N/A since no answers are submitted for this interaction)
// - Has a default outcome: no (N/A since there's no state routing after this state; it's terminal)
// - Has support for showing hints: no
// - Has support for showing a solution: no
message EndExplorationInstanceDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // No answers can be submitted to the end exploration interaction, so there are neither answer
  // groups nor solutions. The interaction does have customization arguments, but they aren't
  // supported in the Android app. No default outcome is possible since the user takes no
  // interactions. No hints can be shown to the user.
}

// Represents the base structure for an answer group (that is, the group of fields common among all
// interaction answer groups).
message BaseAnswerGroupDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The outcome details for how the platform should response to an answer matched to this group.
  OutcomeDto outcome = 1;

  // The misconception (if any) associated with answers matched to this group.
  MisconceptionDto tagged_skill_misconception = 2;
}

// Represents the response the platform should provide for a particular answer.
message OutcomeDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The name of the state to which the user should next be navigated (which may be the same as the
  // current state if the learner should try a different answer).
  string destination_state = 1;

  // The textual feedback, if any, to show the user based on their response.
  SubtitledTextDto feedback = 2;

  // Whether the answer matched to this outcome should be considered 'correct' (which may lead to
  // different platform behavior, such as showing a 'correct' banner). Note that some correct
  // answers may not be labelled as correct, so this being false or absent does not necessarily
  // indicate an answer is wrong.
  bool labelled_as_correct = 3;
}

// Represents a hint that may be shown to the learner to help them get unstuck (in cases when the
// platform detects that the learner may be having difficulty proceeding in a lesson or training
// session).
message HintDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The main content of the hint to show the user.
  SubtitledTextDto hint_content = 1;
}

// Represents the base structure for a solution (that is, the group of fields common among all
// interaction solutions).
message BaseSolutionDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The explanation of the solution to show the user.
  SubtitledTextDto explanation = 1;
}

// Represents a single misconception of a particular skill.
message MisconceptionDto {
  option (org.oppia.proto.v1.versions.structure_proto_version_type) = STATE_PROTO_VERSION;

  // The ID of the skill that the user is likely misunderstanding.
  string skill_id = 1;

  // The ID of the misconception (for cataloging purposes, such as during training sessions).
  string misconception_id = 2;
}
